#!/usr/bin/env python

# Usage: search --list, -l | [--tab, -t] SEARCH_ENGINE_NAME [SEARCH_TERMS ...]
# 
# Search a search engine listed in $W3M_CONFIG_HOME/search-engines.yaml, or list available search engines
# If no search terms are provided, you will be redirected to file:/cgi-bin/search.cgi.
# If symlinked using a valid search engine name, will search using that search engine.
# 
# Options:
#     --list, -l          List search engines provided in $W3M_CONFIG_HOME/search-engines.yaml
#     --tab, -t           View search results in new tab

import sys
import os
from os import path as fpath
import yaml
from urllib import parse as urlparse

ERROR_FMT='''HTTP/1.1 404 ERROR
Content-Type: text/plain; charset=utf-8

{msg}
'''

MSG_FMT='''HTTP/1.1 200 OK
Content-Type: text/plain; charset=utf-8

{msg}
'''

RESPONSE_FMT_STD='''w3m-control: BACK
w3m-control: {prompt_cmd} {engine} "(search {engine_id}):"

'''

RESPONSE_FMT_SEARCH = '''w3m-control: BACK
w3m-control: {goto_cmd} {url}

'''

SEARCH_ENGINE_FILE = fpath.join(os.getenv('W3M_CONFIG_HOME', ''), 'search-engines.yaml')

if __name__ == "__main__":
    if not fpath.exists(SEARCH_ENGINE_FILE):
        print(ERROR_FMT.format(\
            msg='File "{}" does not exist'.format(SEARCH_ENGINE_FILE)))
        exit(0)
    settings = dict()
    args = sys.argv[1:]
    while len(args) > 0:
        if args[0] in ('--tab', '-t'):
            settings['newtab'] = True
            args = args[1:]
        elif args[0] in ('--list', '-l'):
            settings['to_list'] = True
            args = args[1:]
        else:
            break
        #-- end while
    if settings.get('to_list', False):
        with open(SEARCH_ENGINE_FILE) as src:
            lines = ['{}. {}'.format(i + 1, l.strip()) for i, l in enumerate(src.readlines())]
            msg = 'Search Engines\n\n{}'.format(os.linesep.join(lines))
            print(MSG_FMT.format(msg=msg))
                #-- end for i, line
            #-- end with src
        exit(0)
    dictcmd = 'file:/cgi-bin/search/newtab' if settings.get('newtab', False) else \
        'file:/cgi-bin/search'
    search_engines = dict()
    search_engine_ids = dict()
    with open(SEARCH_ENGINE_FILE) as src:
        data = yaml.load(src, Loader=yaml.Loader)
        for k, v in data.items():
            names = k.split(',')
            engine_id = names[0].strip()
            for name in names:
                search_engines[name.strip()] = v
                search_engine_ids[name.strip()] = engine_id
                #-- end for name
            #-- end for k, v
        #-- end with file
    exec_name = sys.argv[0].split(os.sep)[-1]
    if exec_name not in ('search', 'sch'):
        search_engine_name = exec_name
    else:
        if len(args) == 0:
            print(ERROR_FMT.format('no search engine given'))
            exit(0)
        else:
            search_engine_name = args[0]
            args = args[1:]
    if search_engine_name in search_engines:
        search_engine = search_engines[search_engine_name]
        search_engine_id = search_engine_ids[search_engine_name]
        if len(args) > 0:
            goto_cmd = 'TAB_GOTO' if settings.get('newtab', False) else 'GOTO'
            url = search_engine.replace('%s', urlparse.quote_plus(' '.join(args)))
            print(RESPONSE_FMT_SEARCH.format(goto_cmd=goto_cmd, url=url))
        else:
            prompt_cmd = 'PROMPT_TAB' if settings.get('newtab', False) else 'PROMPT'
            print(RESPONSE_FMT_STD.format(prompt_cmd=prompt_cmd, engine=search_engine, engine_id=search_engine_id))
    else:
        print(ERROR_FMT.format(\
            msg='Search engine "{}" not found in {}'.format(\
                search_engine_name, SEARCH_ENGINE_FILE)))
    #-- end main


